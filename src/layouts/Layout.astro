---
import '@fontsource/jetbrains-mono';

interface Props {
	title: string;
	description: string;
}

const { title, description } = Astro.props;
---

<!doctype html>
<html lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/code-solid.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
		<slot />
	</body>
</html>

<style is:global>
	@tailwind base;
	@tailwind components;
	@tailwind utilities;

	html {
		font-family: 'JetBrains Mono', system-ui, sans-serif;
		min-height: 100vh;
		background-color: #13151a;
		/* background-size: 224px; */
		scroll-behavior: smooth;
	}

	body {
		min-height: 100vh;
		min-width: 100%;
		background: #13151a;
	}

	.h1 {
		@apply text-[48px] font-semibold leading-[1.1] xl:text-[80px];
	}
	.h2 {
		@apply text-[36px] font-semibold leading-[1.1] xl:text-[48px];
	}
	.h3 {
		@apply text-[20px] font-semibold leading-[1.1] xl:text-[24px];
	}

	.esconder {
		opacity: 0;
		filter: blur(5px);
		transform: translateX(-100%);
		transition: all 1s;
	}

	.mostrar {
		opacity: 1;
		filter: blur(0);
		transform: translateX(0);
	}

	@media (prefers-reduced-motion: reduce) {
		html {
			scroll-behavior: auto;
		}

		.esconder {
			transition: none;
		}
	}
</style>

<script>
	const observer = new IntersectionObserver(entries => {
		entries.forEach(entry => {
			console.log(entry);
			if (entry.isIntersecting) {
				entry.target.classList.add('mostrar');
			} else {
				entry.target.classList.remove('mostrar');
			}
		});
	});

	const hiddenElements = document.querySelectorAll('.esconder');
	hiddenElements.forEach(element => observer.observe(element));
</script>
